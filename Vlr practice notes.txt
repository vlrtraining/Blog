python manage.py help

python -m django --version

django-admin startproject mysite

python manage.py runserver

git

git init
git status
git add -A
git commit -m "sql added"


rameshvch 

git config --global user.name "rameshvch"
git config --global user.email ramesh.vch@gmail.com

 
cd desktop/python web/word count
python manage.py runserver

wht is vertival environment
pip3 install virtualenv
cd desktop
virtualenv vlrvenv
activte how
source  vlrvenv/bin/activate
source vlrvenv/bin/activate

vlr\Scripts\activate.bat
type python
---colse deactivate
start
django-admin startproject blog
cd blog
python manage.py runserver
git ignore file
--------
git init
git status
git add -A
git commit -m "date 12th July 2018"
runserver now
git status
local host
-----

run cmd
vlrvenv\Scripts\activate.bat
python manage.py startapp posts
python manage.py startapp jobs
git add _a
git commit -m "addde sposts and jobs aps"
--------------------
modules 
C:\Users\venkat>cd desktop

C:\Users\venkat\Desktop>vlrvenv\Scripts\activate.bat

(vlrvenv) C:\Users\venkat\Desktop>cd blog

(vlrvenv) C:\Users\venkat\Desktop\blog>
in job
## models.py create class

## https://docs.djangoproject.com/en/2.0/topics/db/models/
A model is the single, definitive source of information about your data. It contains the essential fields and behaviors of the data you’re storing. Generally, each model maps to a single database table.
code
from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
-------------
image fields
https://docs.djangoproject.com/en/2.0/ref/models/fields/
## after create image and summary filed run server
python manage.py runserver
You have 14 unapplied migration(s).
plz do migrations
python manage.py migrate
----------------------
python manage.py makemigrations

# main blog folde
#setting.py
#installed aps
INSTALLED_APPS = [

     'jobs.apps.JobsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
# ad media file
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#medi folder craeted automaticall
## ad media url
MEDIA_URL = '/media/'

# check for migrations
python manage.py makemigrations
#pillow
pip install Pillow==5.0.0
------------
python manage.py migrate
-------------
admin
python manage.py createsuperuser
---# 
add aps to admin
### jobs/admin.py
 from .models import Job
# open admin
ad image aand text
# click on image
 # open media folder 

##### goto main urls
+ static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)

imort
from django.conf import settings

from django.conf.urls.static import static


#### How To Use Postgresql with your Django Application
### install postgress
vlrvenv\Scripts\activate.bat
## check user
\du
## password
\pasword dbname
## create db
CREATE DATABASE DBNAME
### open blog settings
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
------------
Command "python setup.py egg_info" failed with error code 1 in C:\Users\venkat\A
ppData\Local\Temp\pip-install-i6_d1znp\psycopg2\

https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-django-application-on-debian-8
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'myproject',
        'USER': 'postgres',
        'PASSWORD': 'vlrtraining',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
### save that changes
## run server
python manage.py runserver
we got a problem psycopg2
pip install psycopg2
runserver
pip install psycopg2-binary
--------------------
python manage.py migrate
python manage.py runserver
----
git remote add origin git@github.com:vlrtraining/Blog.git
git push -u origin master
---
post app
# create models

title
pub_date
text
image
class Post(models.Model):
    title = models.CharField(max_length=200)    
    body = models.TextField()
    pub_date=models.DateTimeFieled()
    image = models.ImageField(upload_to='images/')
----------------------------------

#add app to settingd
'post.apps.PostsConfig',

# migrate
python manage.py makemigrations
python manage.py migrate
# ad admin
from .models import Posts
# Register your models here.
admin.site.register(Posts)

python manage.py runserver
--------------------
create home page for blogs
first got views.py
def home(request):
	return render(request,'jobs/home.html')

from urls \.py
import jobs.views
path('', jobs.views,home,'home'),
create template folder 
templates/jobs
home.htl
------------
bootstrap
search nav 
header
---------
copywrite {% now "Y" %}
text-center
------------------

add jobs to boxees
go views.py
from .models import Job


def home(request):
	jobs=Job.Objects
    return render(request,'jobs/home.html',{'jobs':jobs})

go home .html

{% for job in jobs.all %}
{% endfor %}

and in paragraph
{{ job.summary }}
src="{{job.image.url}}



{{job.image.url}}

{{ job.url1 }}
------------
adposts
path('posts/', include('posts.urls'))

in posts app
create urls.py


in views.py
create function
--------------
create summary of text
models
def summary(self):
return self.body[:100]

def sdate(self):
return self.pub_date.strftime(' %b %e %Y')
def __str__(self):
return self.title
-----------------------
blog urls.py


path('<int:blog_id>/',views.detail,name='detail')
views.py

from d.s im re ,get_object_or_404
def detail(request,blog_id):
p=get_object_or_404(blog,pk=blog_id)

return render(request,'posts/detail.html',{'post':p})
create dtrtail.html
-----
work with static files
create static folder in blog

in settings
STATICFILES_DIRS =[
os.path.join(BASE_DIR, 'blogs/static/')
]


STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'
-------------
create static
paython manage.py collectstatic

in html file
{% load staticfiles %}
{% static 'Angular.pdf'}
------------
{ % url 'home'
https://www.vlrtraining.in/
allpsost
{% url 'allposts'%}
change title
goto post page

for post links
href{% url 'detail' blog.id
{blog.title} ffor









